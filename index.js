"use strict";
var IO = require("socket.io");
var express = require("express");
var bodyParser = require("body-parser");
var jwt = require("jsonwebtoken");
var pathExists = require("path-exists");
var cors = require("cors");
var docker = require("dockerlogs");
var merge = require("json-add");
var ioSocket;
var socketioJwt = require("socketio-jwt");
var options = {
    port: 6767,
    secret: new Date().getTime() + "xxx"
};
var secret;
if (!pathExists.sync("./conf.json"))
    merge(options, require("./conf.json"));
var app = express();
app.all("/*", function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    next();
});
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());
if (pathExists.sync("/app") && pathExists.sync("/index.html"))
    app.use("/", express.static(__dirname + "/app"));
var server = require("http").Server(app);
console.log("listen :" + options.port);
var io = IO(server);
io.use(socketioJwt.authorize({
    secret: secret,
    handshake: true
}));
io.on("connection", function (socket) {
    socket.on("subscribe", function (room) {
        console.log("joining room", room);
        socket.join(room);
    });
    console.log("hello! ");
});
io.on("disconnection", function (socket) {
    console.log("bye! ");
});
var Docker = new docker();
Docker.stream(function (data) {
    io.sockets.in("inspects").emit("inspects", data);
});
app.post("/login", function (req, res) {
    var token = jwt.sign("oki", secret, { expiresIn: "2days" });
    res.json({ token: token });
});
app.get("/about", function (req, res) {
    res.json(Docker);
});
app.get("/data", function (req, res) {
    Docker.data().then(function (data) {
        res.json(data);
    }).catch(function (err) {
        res.json(err);
    });
});
server.listen(options.port);

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBJTyBmcm9tIFwic29ja2V0LmlvXCI7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0ICogYXMgand0IGZyb20gXCJqc29ud2VidG9rZW5cIjtcbmltcG9ydCAqIGFzIHBhdGhFeGlzdHMgZnJvbSBcInBhdGgtZXhpc3RzXCI7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgZG9ja2VyID0gcmVxdWlyZShcImRvY2tlcmxvZ3NcIik7XG5pbXBvcnQgbWVyZ2UgPSByZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cblxuaW50ZXJmYWNlIElkZWZhdWx0cyB7XG4gICAgcG9ydDogbnVtYmVyO1xuICAgIHNlY3JldD86IHN0cmluZztcblxufVxuXG5cbmxldCBpb1NvY2tldDogYW55O1xuXG5sZXQgc29ja2V0aW9Kd3QgPSByZXF1aXJlKFwic29ja2V0aW8tand0XCIpO1xuXG5cbmxldCBvcHRpb25zOiBJZGVmYXVsdHMgPSB7XG4gICAgcG9ydDogNjc2NyxcbiAgICBzZWNyZXQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgXCJ4eHhcIlxuXG59XG5sZXQgc2VjcmV0OiBzdHJpbmc7XG5cblxuaWYgKCFwYXRoRXhpc3RzLnN5bmMoXCIuL2NvbmYuanNvblwiKSkgbWVyZ2Uob3B0aW9ucywgcmVxdWlyZShcIi4vY29uZi5qc29uXCIpKVxuXG5cblxuXG5cblxuXG5sZXQgYXBwID0gZXhwcmVzcygpO1xuYXBwLmFsbChcIi8qXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XG5cbiAgICBuZXh0KCk7XG59KTtcblxuLy8gcGFyc2UgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5cbi8vIHBhcnNlIGFwcGxpY2F0aW9uL2pzb25cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5cbmlmIChwYXRoRXhpc3RzLnN5bmMoXCIvYXBwXCIpICYmIHBhdGhFeGlzdHMuc3luYyhcIi9pbmRleC5odG1sXCIpKSBhcHAudXNlKFwiL1wiLCBleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyBcIi9hcHBcIikpO1xuXG5cbmxldCBzZXJ2ZXIgPSByZXF1aXJlKFwiaHR0cFwiKS5TZXJ2ZXIoYXBwKTtcblxuY29uc29sZS5sb2coXCJsaXN0ZW4gOlwiICsgb3B0aW9ucy5wb3J0KTtcblxuXG5cbmxldCBpbyA9IElPKHNlcnZlcik7XG5pby51c2Uoc29ja2V0aW9Kd3QuYXV0aG9yaXplKHtcbiAgICBzZWNyZXQ6IHNlY3JldCxcbiAgICBoYW5kc2hha2U6IHRydWVcblxufSkpO1xuXG5pby5vbihcImNvbm5lY3Rpb25cIiwgZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgLy8gaW4gc29ja2V0LmlvIDEuMFxuXG5cbiAgICBzb2NrZXQub24oXCJzdWJzY3JpYmVcIiwgZnVuY3Rpb24ocm9vbSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImpvaW5pbmcgcm9vbVwiLCByb29tKTtcbiAgICAgICAgc29ja2V0LmpvaW4ocm9vbSk7XG4gICAgfSk7XG5cblxuXG5cblxuXG5cbiAgICBjb25zb2xlLmxvZyhcImhlbGxvISBcIik7XG59KTtcbmlvLm9uKFwiZGlzY29ubmVjdGlvblwiLCBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICAvLyBpbiBzb2NrZXQuaW8gMS4wXG5cblxuICAgIGNvbnNvbGUubG9nKFwiYnllISBcIik7XG59KTtcbmxldCBEb2NrZXIgPSBuZXcgZG9ja2VyKCk7XG5Eb2NrZXIuc3RyZWFtKGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgIGlvLnNvY2tldHMuaW4oXCJpbnNwZWN0c1wiKS5lbWl0KFwiaW5zcGVjdHNcIiwgZGF0YSk7XG5cbn0pXG5hcHAucG9zdChcIi9sb2dpblwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuXG5cbiAgICBsZXQgdG9rZW4gPSBqd3Quc2lnbihcIm9raVwiLCBzZWNyZXQsIHsgZXhwaXJlc0luOiBcIjJkYXlzXCIgfSk7XG4gICAgcmVzLmpzb24oeyB0b2tlbjogdG9rZW4gfSk7XG5cblxufSlcblxuYXBwLmdldChcIi9hYm91dFwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuXG5cblxuICAgIHJlcy5qc29uKERvY2tlcik7XG5cblxufSlcblxuXG5hcHAuZ2V0KFwiL2RhdGFcIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcblxuXG4gICAgRG9ja2VyLmRhdGEoKS50aGVuKFxuICAgICAgICBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXMuanNvbihkYXRhKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICByZXMuanNvbihlcnIpO1xuICAgICAgICB9KVxuXG5cblxufSlcbnNlcnZlci5saXN0ZW4ob3B0aW9ucy5wb3J0KTsiXX0=
