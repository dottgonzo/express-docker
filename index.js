"use strict";
var IO = require("socket.io");
var express = require("express");
var bodyParser = require("body-parser");
var jwt = require("jsonwebtoken");
var pathExists = require("path-exists");
var cors = require("cors");
var docker = require("dockerlogs");
var merge = require("json-add");
var ioSocket;
var socketioJwt = require("socketio-jwt");
var options = {
    port: 6767,
    secret: new Date().getTime() + "xxx"
};
if (pathExists.sync("./conf.json"))
    merge(options, require("./conf.json"));
var app = express();
app.all("/*", function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    next();
});
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());
if (pathExists.sync("/app") && pathExists.sync("/index.html"))
    app.use("/", express.static(__dirname + "/app"));
var server = require("http").Server(app);
console.log("listen :" + options.port);
var io = IO(server);
io.use(socketioJwt.authorize({
    secret: options.secret,
    handshake: true
}));
io.on("connection", function (socket) {
    console.log("connected");
    socket.on("subscribe", function (room) {
        console.log("joining room", room);
        socket.join(room);
    });
    console.log("hello! ");
});
io.on("disconnection", function (socket) {
    console.log("bye! ");
});
var Docker = new docker();
var streamInspect = false;
Docker.stream(function (data) {
    if (data !== streamInspect) {
        streamInspect = data;
        io.sockets.in("inspects").emit("inspects", streamInspect);
    }
});
app.post("/login", function (req, res) {
    var token = jwt.sign({ ok: "oki" }, options.secret, { expiresIn: "2 days" });
    res.json({ token: token });
});
app.get("/about", function (req, res) {
    res.json(Docker);
});
app.get("/data", function (req, res) {
    if (streamInspect) {
        res.json(streamInspect);
    }
    else {
        Docker.data().then(function (data) {
            res.json(data);
        }).catch(function (err) {
            res.json(err);
        });
    }
});
server.listen(options.port);

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFJO1lBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsR0FBRztZQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQztBQUtMLENBQUMsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBJTyBmcm9tIFwic29ja2V0LmlvXCI7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0ICogYXMgand0IGZyb20gXCJqc29ud2VidG9rZW5cIjtcbmltcG9ydCAqIGFzIHBhdGhFeGlzdHMgZnJvbSBcInBhdGgtZXhpc3RzXCI7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgZG9ja2VyID0gcmVxdWlyZShcImRvY2tlcmxvZ3NcIik7XG5pbXBvcnQgbWVyZ2UgPSByZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cblxuaW50ZXJmYWNlIElkZWZhdWx0cyB7XG4gICAgcG9ydDogbnVtYmVyO1xuICAgIHNlY3JldD86IHN0cmluZztcblxufVxuXG5cbmxldCBpb1NvY2tldDogYW55O1xuXG5sZXQgc29ja2V0aW9Kd3QgPSByZXF1aXJlKFwic29ja2V0aW8tand0XCIpO1xuXG5cbmxldCBvcHRpb25zOiBJZGVmYXVsdHMgPSB7XG4gICAgcG9ydDogNjc2NyxcbiAgICBzZWNyZXQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgXCJ4eHhcIlxuXG59XG5cblxuXG5cbmlmIChwYXRoRXhpc3RzLnN5bmMoXCIuL2NvbmYuanNvblwiKSkgbWVyZ2Uob3B0aW9ucywgcmVxdWlyZShcIi4vY29uZi5qc29uXCIpKVxuXG5cblxuXG5cblxuXG5sZXQgYXBwID0gZXhwcmVzcygpO1xuYXBwLmFsbChcIi8qXCIsIGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XG5cbiAgICBuZXh0KCk7XG59KTtcblxuLy8gcGFyc2UgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5cbi8vIHBhcnNlIGFwcGxpY2F0aW9uL2pzb25cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5cbmlmIChwYXRoRXhpc3RzLnN5bmMoXCIvYXBwXCIpICYmIHBhdGhFeGlzdHMuc3luYyhcIi9pbmRleC5odG1sXCIpKSBhcHAudXNlKFwiL1wiLCBleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyBcIi9hcHBcIikpO1xuXG5cbmxldCBzZXJ2ZXIgPSByZXF1aXJlKFwiaHR0cFwiKS5TZXJ2ZXIoYXBwKTtcblxuY29uc29sZS5sb2coXCJsaXN0ZW4gOlwiICsgb3B0aW9ucy5wb3J0KTtcblxuXG5cbmxldCBpbyA9IElPKHNlcnZlcik7XG5pby51c2Uoc29ja2V0aW9Kd3QuYXV0aG9yaXplKHtcbiAgICBzZWNyZXQ6IG9wdGlvbnMuc2VjcmV0LFxuICAgIGhhbmRzaGFrZTogdHJ1ZVxuXG59KSk7XG5cbmlvLm9uKFwiY29ubmVjdGlvblwiLCBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICAvLyBpbiBzb2NrZXQuaW8gMS4wXG5cbmNvbnNvbGUubG9nKFwiY29ubmVjdGVkXCIpXG4gICAgc29ja2V0Lm9uKFwic3Vic2NyaWJlXCIsIGZ1bmN0aW9uKHJvb20pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJqb2luaW5nIHJvb21cIiwgcm9vbSk7XG4gICAgICAgIHNvY2tldC5qb2luKHJvb20pO1xuICAgIH0pO1xuXG5cblxuXG5cblxuXG4gICAgY29uc29sZS5sb2coXCJoZWxsbyEgXCIpO1xufSk7XG5pby5vbihcImRpc2Nvbm5lY3Rpb25cIiwgZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgLy8gaW4gc29ja2V0LmlvIDEuMFxuXG5cbiAgICBjb25zb2xlLmxvZyhcImJ5ZSEgXCIpO1xufSk7XG5sZXQgRG9ja2VyID0gbmV3IGRvY2tlcigpO1xuXG5sZXQgc3RyZWFtSW5zcGVjdDogYW55ID0gZmFsc2U7XG5cbkRvY2tlci5zdHJlYW0oZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmIChkYXRhICE9PSBzdHJlYW1JbnNwZWN0KSB7XG4gICAgICAgIHN0cmVhbUluc3BlY3QgPSBkYXRhO1xuICAgICAgICBpby5zb2NrZXRzLmluKFwiaW5zcGVjdHNcIikuZW1pdChcImluc3BlY3RzXCIsIHN0cmVhbUluc3BlY3QpO1xuICAgIH1cblxufSlcbmFwcC5wb3N0KFwiL2xvZ2luXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cblxuICAgIGxldCB0b2tlbiA9IGp3dC5zaWduKHtvazpcIm9raVwifSwgb3B0aW9ucy5zZWNyZXQsIHsgZXhwaXJlc0luOiBcIjIgZGF5c1wiIH0pO1xuICAgIHJlcy5qc29uKHsgdG9rZW46IHRva2VuIH0pO1xuXG5cbn0pXG5cbmFwcC5nZXQoXCIvYWJvdXRcIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcblxuXG5cbiAgICByZXMuanNvbihEb2NrZXIpO1xuXG5cbn0pXG5cblxuYXBwLmdldChcIi9kYXRhXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cbiAgICBpZiAoc3RyZWFtSW5zcGVjdCkge1xuICAgICAgICByZXMuanNvbihzdHJlYW1JbnNwZWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBEb2NrZXIuZGF0YSgpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgcmVzLmpzb24oZGF0YSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgcmVzLmpzb24oZXJyKTtcbiAgICAgICAgfSlcblxuICAgIH1cblxuXG5cblxufSlcbnNlcnZlci5saXN0ZW4ob3B0aW9ucy5wb3J0KTsiXX0=
