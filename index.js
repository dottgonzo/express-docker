"use strict";
var IO = require("socket.io");
var express = require("express");
var bodyParser = require("body-parser");
var jwt = require("jsonwebtoken");
var pathExists = require("path-exists");
var cors = require("cors");
var docker = require("dockerlogs");
var merge = require("json-add");
var ioSocket;
var socketioJwt = require("socketio-jwt");
var options = {
    port: 6767,
    secret: new Date().getTime() + "xxx"
};
if (pathExists.sync("./conf.json"))
    merge(options, require("./conf.json"));
var app = express();
app.all("/*", function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    next();
});
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());
if (pathExists.sync("/app") && pathExists.sync("/index.html"))
    app.use("/", express.static(__dirname + "/app"));
var server = require("http").Server(app);
console.log("listen :" + options.port);
var io = IO(server);
io.use(socketioJwt.authorize({
    secret: options.secret,
    handshake: true
}));
io.on("connection", function (socket) {
    socket.on("subscribe", function (room) {
        console.log("joining room", room);
        socket.join(room);
    });
    console.log("hello! ");
});
io.on("disconnection", function (socket) {
    console.log("bye! ");
});
var Docker = new docker();
var streamInspect = false;
Docker.stream(function (data) {
    if (data !== streamInspect) {
        streamInspect = data;
        io.sockets.in("inspects").emit("inspects", streamInspect);
    }
});
app.post("/login", function (req, res) {
    var token = jwt.sign({ ok: "oki" }, options.secret, { expiresIn: "2 days" });
    res.json({ token: token });
});
app.get("/about", function (req, res) {
    res.json(Docker);
});
app.get("/data", function (req, res) {
    if (streamInspect) {
        res.json(streamInspect);
    }
    else {
        Docker.data().then(function (data) {
            res.json(data);
        }).catch(function (err) {
            res.json(err);
        });
    }
});
server.listen(options.port);

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLENBQUM7UUFDSixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSTtZQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFTLEdBQUc7WUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUM7QUFLTCxDQUFDLENBQUMsQ0FBQTtBQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSU8gZnJvbSBcInNvY2tldC5pb1wiO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCAqIGFzIGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5pbXBvcnQgKiBhcyBwYXRoRXhpc3RzIGZyb20gXCJwYXRoLWV4aXN0c1wiO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tIFwiY29yc1wiO1xuaW1wb3J0IGRvY2tlciA9IHJlcXVpcmUoXCJkb2NrZXJsb2dzXCIpO1xuaW1wb3J0IG1lcmdlID0gcmVxdWlyZShcImpzb24tYWRkXCIpO1xuaW1wb3J0IHRpbWVyZGFlbW9uID0gcmVxdWlyZShcInRpbWVyZGFlbW9uXCIpO1xuXG5cbmludGVyZmFjZSBJZGVmYXVsdHMge1xuICAgIHBvcnQ6IG51bWJlcjtcbiAgICBzZWNyZXQ/OiBzdHJpbmc7XG5cbn1cblxuXG5sZXQgaW9Tb2NrZXQ6IGFueTtcblxubGV0IHNvY2tldGlvSnd0ID0gcmVxdWlyZShcInNvY2tldGlvLWp3dFwiKTtcblxuXG5sZXQgb3B0aW9uczogSWRlZmF1bHRzID0ge1xuICAgIHBvcnQ6IDY3NjcsXG4gICAgc2VjcmV0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIFwieHh4XCJcblxufVxuXG5cblxuXG5pZiAocGF0aEV4aXN0cy5zeW5jKFwiLi9jb25mLmpzb25cIikpIG1lcmdlKG9wdGlvbnMsIHJlcXVpcmUoXCIuL2NvbmYuanNvblwiKSlcblxuXG5cblxuXG5cblxubGV0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC5hbGwoXCIvKlwiLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuXG4gICAgbmV4dCgpO1xufSk7XG5cbi8vIHBhcnNlIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuXG4vLyBwYXJzZSBhcHBsaWNhdGlvbi9qc29uXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuYXBwLnVzZShjb3JzKCkpO1xuXG5pZiAocGF0aEV4aXN0cy5zeW5jKFwiL2FwcFwiKSAmJiBwYXRoRXhpc3RzLnN5bmMoXCIvaW5kZXguaHRtbFwiKSkgYXBwLnVzZShcIi9cIiwgZXhwcmVzcy5zdGF0aWMoX19kaXJuYW1lICsgXCIvYXBwXCIpKTtcblxuXG5sZXQgc2VydmVyID0gcmVxdWlyZShcImh0dHBcIikuU2VydmVyKGFwcCk7XG5cbmNvbnNvbGUubG9nKFwibGlzdGVuIDpcIiArIG9wdGlvbnMucG9ydCk7XG5cblxuXG5sZXQgaW8gPSBJTyhzZXJ2ZXIpO1xuaW8udXNlKHNvY2tldGlvSnd0LmF1dGhvcml6ZSh7XG4gICAgc2VjcmV0OiBvcHRpb25zLnNlY3JldCxcbiAgICBoYW5kc2hha2U6IHRydWVcblxufSkpO1xuXG5pby5vbihcImNvbm5lY3Rpb25cIiwgZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgLy8gaW4gc29ja2V0LmlvIDEuMFxuXG5cbiAgICBzb2NrZXQub24oXCJzdWJzY3JpYmVcIiwgZnVuY3Rpb24ocm9vbSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImpvaW5pbmcgcm9vbVwiLCByb29tKTtcbiAgICAgICAgc29ja2V0LmpvaW4ocm9vbSk7XG4gICAgfSk7XG5cblxuXG5cblxuXG5cbiAgICBjb25zb2xlLmxvZyhcImhlbGxvISBcIik7XG59KTtcbmlvLm9uKFwiZGlzY29ubmVjdGlvblwiLCBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICAvLyBpbiBzb2NrZXQuaW8gMS4wXG5cblxuICAgIGNvbnNvbGUubG9nKFwiYnllISBcIik7XG59KTtcbmxldCBEb2NrZXIgPSBuZXcgZG9ja2VyKCk7XG5cbmxldCBzdHJlYW1JbnNwZWN0OiBhbnkgPSBmYWxzZTtcblxuRG9ja2VyLnN0cmVhbShmdW5jdGlvbihkYXRhKSB7XG4gICAgaWYgKGRhdGEgIT09IHN0cmVhbUluc3BlY3QpIHtcbiAgICAgICAgc3RyZWFtSW5zcGVjdCA9IGRhdGE7XG4gICAgICAgIGlvLnNvY2tldHMuaW4oXCJpbnNwZWN0c1wiKS5lbWl0KFwiaW5zcGVjdHNcIiwgc3RyZWFtSW5zcGVjdCk7XG4gICAgfVxuXG59KVxuYXBwLnBvc3QoXCIvbG9naW5cIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcblxuXG4gICAgbGV0IHRva2VuID0gand0LnNpZ24oe29rOlwib2tpXCJ9LCBvcHRpb25zLnNlY3JldCwgeyBleHBpcmVzSW46IFwiMiBkYXlzXCIgfSk7XG4gICAgcmVzLmpzb24oeyB0b2tlbjogdG9rZW4gfSk7XG5cblxufSlcblxuYXBwLmdldChcIi9hYm91dFwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuXG5cblxuICAgIHJlcy5qc29uKERvY2tlcik7XG5cblxufSlcblxuXG5hcHAuZ2V0KFwiL2RhdGFcIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcblxuICAgIGlmIChzdHJlYW1JbnNwZWN0KSB7XG4gICAgICAgIHJlcy5qc29uKHN0cmVhbUluc3BlY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIERvY2tlci5kYXRhKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICByZXMuanNvbihkYXRhKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICByZXMuanNvbihlcnIpO1xuICAgICAgICB9KVxuXG4gICAgfVxuXG5cblxuXG59KVxuc2VydmVyLmxpc3RlbihvcHRpb25zLnBvcnQpOyJdfQ==
