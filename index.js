"use strict";
var IO = require("socket.io");
var express = require("express");
var bodyParser = require("body-parser");
var jwt = require("jsonwebtoken");
var pathExists = require("path-exists");
var cors = require("cors");
var docker = require("dockerlogs");
var merge = require("json-add");
var http = require("http");
var socketioJwt = require("socketio-jwt");
var app = express();
var ioSocket;
var options = {
    port: 6767,
    secret: new Date().getTime() + "xxx",
    password: 'admindocker'
};
if (pathExists.sync("./conf.json"))
    merge(options, require("./conf.json"));
app.all("/*", function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    next();
});
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());
if (pathExists.sync("/app") && pathExists.sync("/index.html"))
    app.use("/", express.static(__dirname + "/app"));
var server = http.createServer(app);
var io = IO(server);
console.log("listen :" + options.port);
io.on('connection', socketioJwt.authorize({
    secret: options.secret,
    timeout: 15000
})).on('authenticated', function (socket) {
    socket.join('user');
    console.log('new user');
    socket.on("subscribe", function (room) {
        console.log("joining room", room);
        socket.join(room);
    });
});
io.on("disconnection", function (socket) {
    console.log("bye! ");
});
var Docker = new docker();
var streamInspect = false;
Docker.stream(function (data) {
    if (data !== streamInspect) {
        streamInspect = data;
        io.sockets.in("inspects").emit("inspects", streamInspect);
    }
});
app.post("/signin", function (req, res) {
    console.log('signin');
    if (req.body && req.body.pass && req.body.pass === options.password) {
        console.log('token');
        var token = jwt.sign({ ok: "oki" }, options.secret, { expiresIn: "2 days" });
        console.log(token);
        res.json({ token: token });
    }
    else {
        res.json({ error: 'wrong auth' });
    }
});
app.get("/about", function (req, res) {
    res.json(Docker);
});
app.get("/data", function (req, res) {
    if (streamInspect) {
        res.json(streamInspect);
    }
    else {
        Docker.data().then(function (data) {
            res.json(data);
        }).catch(function (err) {
            res.json(err);
        });
    }
});
server.listen(options.port);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
